#include "Core/Types.h"
#include "Core/Config.h"
#include "Input/Joystick.h"
#include "Communication/ESPNowManager.h"
#include "UI/LEDManager.h"

Joystick joystick;
ESPNowManager espNow;
LEDManager ledManager;

// MAC –∞–¥—Ä–µ—Å –ø—Ä–∏–µ–º–Ω–∏–∫–∞ (–º–∞—à–∏–Ω–∫–∏) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const uint8_t* receiverMac = Config::DEFAULT_RECEIVER_MAC;

void printDeviceInfo() {
  Serial.println("üèéÔ∏è ===== RC –ü–£–õ–¨–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø =====");
  Serial.print("MAC –∞–¥—Ä–µ—Å: ");
  Serial.println(WiFi.macAddress());
  Serial.print("Chip ID: 0x");
  Serial.println(ESP.getEfuseMac(), HEX);
  Serial.print("–ß–∞—Å—Ç–æ—Ç–∞ CPU: ");
  Serial.print(ESP.getCpuFreqMHz());
  Serial.println(" MHz");
  Serial.print("Flash —Ä–∞–∑–º–µ—Ä: ");
  Serial.print(ESP.getFlashChipSize() / (1024 * 1024));
  Serial.println(" MB");
  Serial.print("SDK –≤–µ—Ä—Å–∏—è: ");
  Serial.println(ESP.getSdkVersion());
  Serial.println("=================================");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("üèéÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RC –ø—É–ª—å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");
  
  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  printDeviceInfo();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  joystick.begin();
  espNow.begin();
  ledManager.begin();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–µ–º–Ω–∏–∫ –∫–∞–∫ –ø–∏–∞—Ä
  Serial.println("‚è≥ –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω–∫–∏...");
  
  if (espNow.addPeer(receiverMac)) {
    Serial.print("‚úÖ –ú–∞—à–∏–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ");
    for(int i = 0; i < 6; i++) {
      Serial.print(receiverMac[i], HEX);
      if(i < 5) Serial.print(":");
    }
    Serial.println();
    ledManager.setConnectionStatus(true);
    ledManager.blinkSuccess();
  } else {
    Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—à–∏–Ω–∫—É");
    Serial.println("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MAC-–∞–¥—Ä–µ—Å –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—É–ª—å—Ç");
    ledManager.blinkError();
  }
  
  Serial.println("üöÄ –ü—É–ª—å—Ç –≥–æ—Ç–æ–≤ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é");
  if (espNow.isConnected()) {
    Serial.println("üì° –°–≤—è–∑—å —Å –º–∞—à–∏–Ω–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
  } else {
    Serial.println("‚ö†Ô∏è  –°–≤—è–∑—å —Å –º–∞—à–∏–Ω–∫–æ–π –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
  }
  Serial.println("üéÆ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");
  Serial.println("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:");
  Serial.println("   –î–∂–æ–π—Å—Ç–∏–∫ - –≥–∞–∑ –∏ —Ä—É–ª–µ–≤–æ–µ");
  Serial.println("   –ö–Ω–æ–ø–∫–∞ A - —Ä—É—á–Ω–æ–π —Ç–æ—Ä–º–æ–∑");
  Serial.println("   –ö–Ω–æ–ø–∫–∞ B - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏");
  Serial.println("   –ö–Ω–æ–ø–∫–∞ C - —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º");
}

void loop() {
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞
  joystick.update();
  ControlData data = joystick.getData();
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
  ledManager.setGear(data.gear);
  ledManager.setTurbo(data.turbo);
  ledManager.update();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ CRC –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  static uint16_t lastCRC = 0;
  uint16_t currentCRC = joystick.calculateCRC(data);
  
  if (currentCRC == data.crc && currentCRC != lastCRC) {
    if (espNow.sendData(data)) {
      // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
      ledManager.setConnectionStatus(true);
    } else {
      ledManager.setConnectionStatus(false);
    }
    lastCRC = currentCRC;
  }
  
  // –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 500 –º—Å
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint > 500) {
    const char* gearText = data.gear == 1 ? "–í–ü–ï–†–ï–î" : "–ù–ê–ó–ê–î";
    const char* turboText = data.turbo ? "–¢–£–†–ë–û" : "–ù–û–†–ú–ê";
    
    Serial.printf("üéÆ –ì–∞–∑: %-4d –†—É–ª–µ–≤–æ–µ: %-4d\n", data.throttle, data.steering);
    Serial.printf("üîÑ %s | %s | %s %s\n", gearText, turboText,
                data.button1 ? "[–¢–û–†–ú–û–ó]" : "        ",
                data.button2 ? "[–§–£–ù–ö–¶–ò–Ø]" : "         ");
    Serial.printf("üìä –ü–∞–∫–µ—Ç—ã: %d –£—Å–ø–µ—Ö: %.1f%%\n", 
                 espNow.getSentCount(), espNow.getSuccessRate());
    Serial.println("---");
    lastPrint = millis();
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  static unsigned long lastConnectionCheck = 0;
  if (millis() - lastConnectionCheck > 2000) {
    if (!espNow.isConnected()) {
      Serial.println("‚ö†Ô∏è  –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –º–∞—à–∏–Ω–∫–æ–π");
      ledManager.setConnectionStatus(false);
    }
    lastConnectionCheck = millis();
  }
  
  delay(10); // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ü–∏–∫–ª–∞
}