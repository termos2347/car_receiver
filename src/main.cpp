// –ü–£–õ–¨–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø (–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫) - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
#include <esp_now.h>
#include <WiFi.h>
#include "Core/Types.h"
#include "Input/Joystick.h"

Joystick joystick;

// MAC –∞–¥—Ä–µ—Å —Å–∞–º–æ–ª–µ—Ç–∞ (–ø—Ä–∏–µ–º–Ω–∏–∫–∞)
const uint8_t receiverMac[] = {0xEC, 0xE3, 0x34, 0x1A, 0xB1, 0xA8};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
static ControlData currentData;
static uint16_t lastCRC = 0;
static bool dataChanged = false;

// –¢–∞–π–º–∏–Ω–≥–∏ (–≤ –º—Å)
enum Timing {
  JOYSTICK_READ_INTERVAL = 30,    // –ß—Ç–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–æ–≤
  DATA_SEND_INTERVAL = 40,        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  SERIAL_PRINT_INTERVAL = 30000,  // –í—ã–≤–æ–¥ –≤ Serial
  LED_INDICATION_TIME = 25        // –ò–Ω–¥–∏–∫–∞—Ü–∏—è LED
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
static unsigned long lastJoystickRead = 0;
static unsigned long lastDataSend = 0;
static unsigned long lastSerialPrint = 0;
static unsigned long ledOffTime = 0;
static bool ledState = false;

// –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
bool addPeer(const uint8_t* macAddress);
void optimizedDeviceInfo();
void setupIndication();
void handleJoystickReading();
void handleDataSending();
void handleLEDIndication();
void handleSerialOutput();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞ –≤ ESP-NOW
bool addPeer(const uint8_t* macAddress) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, macAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    
    return esp_now_add_peer(&peerInfo) == ESP_OK;
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
void optimizedDeviceInfo() {
  Serial.println("üéÆ –ü—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω");
  Serial.print("MAC: ");
  Serial.println(WiFi.macAddress());
  Serial.print("Free RAM: ");
  Serial.println(ESP.getFreeHeap());
}

// –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
void setupIndication() {
  pinMode(2, OUTPUT);
  for(int i = 0; i < 3; i++) {
    digitalWrite(2, HIGH);
    delay(80);  // –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    digitalWrite(2, LOW);
    delay(80);
  }
}

void setup() {
  Serial.begin(115200);
  delay(800);  // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
  
  Serial.println("üéÆ –ó–∞–ø—É—Å–∫ –ø—É–ª—å—Ç–∞...");
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  optimizedDeviceInfo();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  joystick.begin();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi –∏ ESP-NOW
  WiFi.mode(WIFI_STA);
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è WiFi –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
  WiFi.setSleep(true);  // –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–Ω WiFi
  WiFi.setTxPower(WIFI_POWER_19_5dBm);  // –£–º–µ–Ω—å—à–∏—Ç—å –º–æ—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏
  
  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ ESP-NOW");
    return;
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  if (addPeer(receiverMac)) {
    Serial.println("‚úÖ –°–∞–º–æ–ª–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω");
  } else {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è");
    return;
  }
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  setupIndication();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  currentData = joystick.getData();
  lastCRC = joystick.calculateCRC(currentData);
  
  Serial.println("üöÄ –ü—É–ª—å—Ç –≥–æ—Ç–æ–≤");
}

void loop() {
  const unsigned long currentMillis = millis();
  
  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
  handleJoystickReading();
  handleDataSending();
  handleLEDIndication();
  handleSerialOutput();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–æ–≤
void handleJoystickReading() {
  const unsigned long currentMillis = millis();
  if (currentMillis - lastJoystickRead >= JOYSTICK_READ_INTERVAL) {
    joystick.update();
    ControlData newData = joystick.getData();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å deadzone –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
    const int DEADZONE = 3;
    if (abs(newData.xAxis1 - currentData.xAxis1) > DEADZONE ||
        abs(newData.yAxis1 - currentData.yAxis1) > DEADZONE ||
        abs(newData.xAxis2 - currentData.xAxis2) > DEADZONE ||
        abs(newData.yAxis2 - currentData.yAxis2) > DEADZONE) {
      
      currentData = newData;
      dataChanged = true;
    }
    
    lastJoystickRead = currentMillis;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
void handleDataSending() {
  const unsigned long currentMillis = millis();
  if (dataChanged && (currentMillis - lastDataSend >= DATA_SEND_INTERVAL)) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CRC —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    uint16_t currentCRC = joystick.calculateCRC(currentData);
    
    if (currentCRC == currentData.crc) {
      esp_err_t result = esp_now_send(receiverMac, (uint8_t *)&currentData, sizeof(currentData));
      
      if (result == ESP_OK) {
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è LED –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
        digitalWrite(2, HIGH);
        ledState = true;
        ledOffTime = currentMillis + LED_INDICATION_TIME;
        lastCRC = currentCRC;
      }
      // –£–±—Ä–∞—Ç—å –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    }
    
    dataChanged = false;
    lastDataSend = currentMillis;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LED –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
void handleLEDIndication() {
  const unsigned long currentMillis = millis();
  if (ledState && currentMillis > ledOffTime) {
    digitalWrite(2, LOW);
    ledState = false;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–º –≤ Serial
void handleSerialOutput() {
  const unsigned long currentMillis = millis();
  if (currentMillis - lastSerialPrint >= SERIAL_PRINT_INTERVAL) {
    // –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤—ã–≤–æ–¥
    Serial.printf("J1:%d,%d J2:%d,%d CRC:%u\n", 
                 currentData.xAxis1, currentData.yAxis1, 
                 currentData.xAxis2, currentData.yAxis2,
                 lastCRC);
    lastSerialPrint = currentMillis;
  }
}