// –ü–£–õ–¨–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø (–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫) - –° DEBUG –†–ï–ñ–ò–ú–û–ú
#include <esp_now.h>
#include <WiFi.h>
#include "Core/Types.h"
#include "Input/Joystick.h"

// === –ù–ê–°–¢–†–û–ô–ö–ò DEBUG ===
#define DEBUG_MODE true  // true - –æ—Ç–ª–∞–¥–∫–∞, false - –ø–æ–ª–µ—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)
// =======================

Joystick joystick;

// MAC –∞–¥—Ä–µ—Å —Å–∞–º–æ–ª–µ—Ç–∞ (–ø—Ä–∏–µ–º–Ω–∏–∫–∞)
const uint8_t receiverMac[] = {0xEC, 0xE3, 0x34, 0x1A, 0xB1, 0xA8};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
static ControlData currentData;
static bool newDataReady = false;
static unsigned long lastDataTime = 0;

// –¢–∞–π–º–∏–Ω–≥–∏ (–≤ –º—Å)
enum Timing {
  DATA_PROCESS_INTERVAL = 30,     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  DATA_SEND_INTERVAL = 40,        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  STATUS_PRINT_INTERVAL = 1000,   // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
  LED_INDICATION_TIME = 25        // –ò–Ω–¥–∏–∫–∞—Ü–∏—è LED
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
static unsigned long lastDataProcess = 0;
static unsigned long lastDataSend = 0;
static unsigned long lastStatusPrint = 0;
static unsigned long ledOffTime = 0;
static bool ledState = false;
static bool connectionStatus = false;

// –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π
bool addPeer(const uint8_t* macAddress);
void printDeviceInfo();
void setupIndication();
void handleDataProcessing(unsigned long currentMillis);
void handleDataSending(unsigned long currentMillis);
void handleLEDIndication(unsigned long currentMillis);
void handleStatusOutput(unsigned long currentMillis);
void handleConnectionCheck(unsigned long currentMillis);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞ –≤ ESP-NOW
bool addPeer(const uint8_t* macAddress) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, macAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    return esp_now_add_peer(&peerInfo) == ESP_OK;
}

// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
void printDeviceInfo() {
  #if DEBUG_MODE
    Serial.println("üéÆ –ü—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω");
    Serial.print("MAC: ");
    Serial.println(WiFi.macAddress());
    Serial.print("Free RAM: ");
    Serial.println(ESP.getFreeHeap());
  #endif
}

// –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
void setupIndication() {
  pinMode(2, OUTPUT);
  for(int i = 0; i < 3; i++) {
    digitalWrite(2, HIGH);
    delay(80);
    digitalWrite(2, LOW);
    delay(80);
  }
}

void setup() {
  #if DEBUG_MODE
    Serial.begin(115200);
    delay(800);
    Serial.println("üéÆ –ó–∞–ø—É—Å–∫ –ø—É–ª—å—Ç–∞...");
  #endif
  
  printDeviceInfo();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  joystick.begin();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi –∏ ESP-NOW
  WiFi.mode(WIFI_STA);
  WiFi.setSleep(true);
  WiFi.setTxPower(WIFI_POWER_19_5dBm);
  
  if (esp_now_init() != ESP_OK) {
    #if DEBUG_MODE
      Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESP-NOW");
    #endif
    return;
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ä–∞
  if (addPeer(receiverMac)) {
    #if DEBUG_MODE
      Serial.println("‚úÖ –°–∞–º–æ–ª–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω");
    #endif
    connectionStatus = true;
  } else {
    #if DEBUG_MODE
      Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–ª–µ—Ç–∞");
    #endif
    connectionStatus = false;
  }
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  setupIndication();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  currentData = joystick.getData();
  currentData.crc = joystick.calculateCRC(currentData);
  
  #if DEBUG_MODE
    Serial.println("üöÄ –ü—É–ª—å—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
  #endif
}

void loop() {
  const unsigned long currentMillis = millis();
  
  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
  handleDataProcessing(currentMillis);
  handleDataSending(currentMillis);
  handleLEDIndication(currentMillis);
  handleStatusOutput(currentMillis);
  handleConnectionCheck(currentMillis);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∂–æ–π—Å—Ç–∏–∫–æ–≤
void handleDataProcessing(unsigned long currentMillis) {
  if (currentMillis - lastDataProcess >= DATA_PROCESS_INTERVAL) {
    joystick.update();
    ControlData newData = joystick.getData();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å deadzone
    const int DEADZONE = 3;
    if (abs(newData.xAxis1 - currentData.xAxis1) > DEADZONE ||
        abs(newData.yAxis1 - currentData.yAxis1) > DEADZONE ||
        abs(newData.xAxis2 - currentData.xAxis2) > DEADZONE ||
        abs(newData.yAxis2 - currentData.yAxis2) > DEADZONE) {
      
      currentData = newData;
      currentData.crc = joystick.calculateCRC(currentData);
      newDataReady = true;
    }
    
    lastDataProcess = currentMillis;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
void handleDataSending(unsigned long currentMillis) {
  if (newDataReady && (currentMillis - lastDataSend >= DATA_SEND_INTERVAL)) {
    esp_err_t result = esp_now_send(receiverMac, (uint8_t *)&currentData, sizeof(currentData));
    
    if (result == ESP_OK) {
      // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      digitalWrite(2, HIGH);
      ledState = true;
      ledOffTime = currentMillis + LED_INDICATION_TIME;
      lastDataTime = currentMillis;
      
      // –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
      #if DEBUG_MODE
        static unsigned long lastDataPrint = 0;
        if (currentMillis - lastDataPrint > 100) {
          Serial.printf("J1:%4d,%4d J2:%4d,%4d B1:%d B2:%d CRC:%4d\n", 
                       currentData.xAxis1, currentData.yAxis1, 
                       currentData.xAxis2, currentData.yAxis2,
                       currentData.button1, currentData.button2, currentData.crc);
          lastDataPrint = currentMillis;
        }
      #endif
    }
    
    newDataReady = false;
    lastDataSend = currentMillis;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LED –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
void handleLEDIndication(unsigned long currentMillis) {
  if (ledState && currentMillis > ledOffTime) {
    digitalWrite(2, LOW);
    ledState = false;
  }
}

// –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
void handleStatusOutput(unsigned long currentMillis) {
  #if DEBUG_MODE
    if (currentMillis - lastStatusPrint >= STATUS_PRINT_INTERVAL) {
      if (connectionStatus) {
        if (currentMillis - lastDataTime < 2000) {
          Serial.println("‚úÖ –°–≤—è–∑—å —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è");
        } else {
          Serial.println("‚ö†Ô∏è  –°–∞–º–æ–ª–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è");
        }
      } else {
        Serial.println("‚ùå –°–∞–º–æ–ª–µ—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
      }
      lastStatusPrint = currentMillis;
    }
  #endif
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
void handleConnectionCheck(unsigned long currentMillis) {
  #if DEBUG_MODE
    static unsigned long lastConnectionCheck = 0;
    
    if (currentMillis - lastConnectionCheck > 10000) {
      bool currentStatus = esp_now_is_peer_exist(receiverMac);
      
      if (currentStatus != connectionStatus) {
        connectionStatus = currentStatus;
        if (connectionStatus) {
          Serial.println("üîó –°–∞–º–æ–ª–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω");
        } else {
          Serial.println("üîå –°–∞–º–æ–ª–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω");
        }
      }
      lastConnectionCheck = currentMillis;
    }
  #endif
}