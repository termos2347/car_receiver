#include "Joystick.h"
#include <Arduino.h>

void Joystick::begin() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    pinMode(hwConfig.THROTTLE_PIN, INPUT);
    pinMode(hwConfig.STEERING_PIN, INPUT);
    pinMode(hwConfig.JOYSTICK_BUTTON_PIN, INPUT_PULLUP);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    pinMode(hwConfig.GEAR_BUTTON_PIN, INPUT_PULLUP);
    pinMode(hwConfig.TURBO_BUTTON_PIN, INPUT_PULLUP);
    pinMode(hwConfig.MENU_BUTTON_PIN, INPUT_PULLUP);
    
    // –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    calibrate();
}

void Joystick::calibrate() {
    Serial.println("üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");
    calibrating = true;
    
    throttleCenter = steeringCenter = 0;
    throttleMin = throttleMax = steeringMin = steeringMax = 0;
    
    // –°–±–æ—Ä –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for(int i = 0; i < Config::CALIBRATION_SAMPLES; i++) {
        int throttle = analogRead(hwConfig.THROTTLE_PIN);
        int steering = analogRead(hwConfig.STEERING_PIN);
        
        throttleCenter += throttle;
        steeringCenter += steering;
        
        if (throttle < throttleMin || i == 0) throttleMin = throttle;
        if (throttle > throttleMax || i == 0) throttleMax = throttle;
        if (steering < steeringMin || i == 0) steeringMin = steering;
        if (steering > steeringMax || i == 0) steeringMax = steering;
        
        delay(10);
    }
    
    throttleCenter /= Config::CALIBRATION_SAMPLES;
    steeringCenter /= Config::CALIBRATION_SAMPLES;
    
    calibrated = true;
    calibrating = false;
    
    Serial.printf("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n");
    Serial.printf("   –ì–∞–∑: —Ü–µ–Ω—Ç—Ä=%d, min=%d, max=%d\n", throttleCenter, throttleMin, throttleMax);
    Serial.printf("   –†—É–ª–µ–≤–æ–µ: —Ü–µ–Ω—Ç—Ä=%d, min=%d, max=%d\n", steeringCenter, steeringMin, steeringMax);
}

void Joystick::update() {
    if (!calibrated || calibrating) return;
    
    // –ß—Ç–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Å–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    int rawThrottle = readFilteredAnalog(hwConfig.THROTTLE_PIN);
    int rawSteering = readFilteredAnalog(hwConfig.STEERING_PIN);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω -512 –¥–æ +512 –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
    int throttle = map(rawThrottle, throttleMin, throttleMax, -512, 512);
    int steering = map(rawSteering, steeringMin, steeringMax, -512, 512);
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    throttle = constrain(throttle, -512, 512);
    steering = constrain(steering, -512, 512);
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–π –∑–æ–Ω—ã –∏ –∫—Ä–∏–≤—ã—Ö
    applyDeadZone(throttle);
    applyDeadZone(steering);
    applyCurves(throttle, steering);
    
    currentData.throttle = throttle;
    currentData.steering = steering;
    
    // –ß—Ç–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    currentData.button1 = !digitalRead(hwConfig.JOYSTICK_BUTTON_PIN);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∏ —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º–∞
    updateGear();
    updateTurbo();
    
    // –†–∞—Å—á–µ—Ç CRC
    currentData.crc = calculateCRC(currentData);
}

void Joystick::updateGear() {
    bool currentButtonState = !digitalRead(hwConfig.GEAR_BUTTON_PIN);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
    if (currentButtonState && !lastGearButtonState) {
        currentGear = (currentGear == 1) ? 2 : 1;
        Serial.printf("üîÑ –ü–µ—Ä–µ–¥–∞—á–∞: %s\n", currentGear == 1 ? "–í–ü–ï–†–ï–î" : "–ù–ê–ó–ê–î");
    }
    lastGearButtonState = currentButtonState;
    
    currentData.gear = currentGear;
}

void Joystick::updateTurbo() {
    bool currentButtonState = !digitalRead(hwConfig.TURBO_BUTTON_PIN);
    
    // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º–∞
    if (currentButtonState && !lastTurboButtonState) {
        turboEnabled = !turboEnabled;
        currentData.turbo = turboEnabled ? 1 : 0;
        Serial.printf("üí® –¢—É—Ä–±–æ-—Ä–µ–∂–∏–º: %s\n", turboEnabled ? "–í–ö–õ" : "–í–´–ö–õ");
    }
    lastTurboButtonState = currentButtonState;
    
    currentData.turbo = turboEnabled ? 1 : 0;
}

void Joystick::applyDeadZone(int& value) {
    if (abs(value) < controlConfig.deadZone) {
        value = 0;
    } else if (value > 0) {
        value = map(value, controlConfig.deadZone, 512, 0, controlConfig.maxThrottle);
    } else {
        value = map(value, -512, -controlConfig.deadZone, -controlConfig.maxThrottle, 0);
    }
}

void Joystick::applyCurves(int& throttle, int& steering) {
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∏–≤–æ–π –∫ –≥–∞–∑—É
    throttle = exponentialTransform(throttle, controlConfig.throttleCurve);
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∫—Ä–∏–≤–æ–π –∫ —Ä—É–ª–µ–≤–æ–º—É
    if (controlConfig.exponentialSteering) {
        steering = exponentialTransform(steering, 1.5);
    }
}

int Joystick::exponentialTransform(int value, float curve) {
    if (value == 0) return 0;
    
    float normalized = float(value) / 512.0;
    float sign = normalized > 0 ? 1.0 : -1.0;
    float result = powf(abs(normalized), curve) * sign;
    
    return int(result * 512);
}

void Joystick::readButtons() {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ update()
    currentData.button2 = !digitalRead(hwConfig.MENU_BUTTON_PIN);
}

int Joystick::readFilteredAnalog(uint8_t pin) {
    // –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 5x –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞
    int readings[5];
    for(int i = 0; i < 5; i++) {
        readings[i] = analogRead(pin);
        delay(1);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –º–µ–¥–∏–∞–Ω—ã
    for(int i = 0; i < 4; i++) {
        for(int j = 0; j < 4 - i; j++) {
            if(readings[j] > readings[j+1]) {
                int temp = readings[j];
                readings[j] = readings[j+1];
                readings[j+1] = temp;
            }
        }
    }
    
    return readings[2]; // –ú–µ–¥–∏–∞–Ω–∞
}

ControlData Joystick::getData() {
    return currentData;
}

uint16_t Joystick::calculateCRC(const ControlData& data) {
    uint16_t crc = 0;
    const uint8_t* bytes = (const uint8_t*)&data;
    
    for(size_t i = 0; i < sizeof(ControlData) - sizeof(uint16_t); i++) {
        crc = (crc << 5) + crc + bytes[i]; // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π CRC
    }
    return crc;
}

bool Joystick::isConnected() {
    return calibrated && 
           analogRead(hwConfig.THROTTLE_PIN) > 0 && 
           analogRead(hwConfig.STEERING_PIN) > 0;
}

void Joystick::setControlConfig(const ControlConfig& config) {
    controlConfig = config;
}

ControlConfig Joystick::getControlConfig() const {
    return controlConfig;
}

void Joystick::startCalibration() {
    calibrating = true;
    calibrated = false;
}

bool Joystick::isCalibrating() const {
    return calibrating;
}